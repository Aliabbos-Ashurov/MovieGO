services:
  postgres:
    image: postgres:17
    container_name: postgres-db
    ports:
      - '5432:5432'
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: moviego
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    #profiles:
    #  - dev   docker compose --profile 'dev' up
    pull_policy: never
    stop_grace_period: 30s

  rabbitmq:
    image: rabbitmq:4.1.0-management
    container_name: rabbitmq-container
    ports:
      - '5672:5672'
      - '15672:15672'
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    restart: unless-stopped
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    pull_policy: never
    stop_grace_period: 30s

  redis:
    image: redis:8.0.1
    container_name: redis-container
    ports:
      - '6379:6379'
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    pull_policy: never
    stop_grace_period: 30s

volumes:
  postgres-data:
    name: postgres-data
  rabbitmq-data:
    name: rabbitmq-data
  redis-data:
    name: redis-data

networks:
  app-network:
    name: app-network